一.shell的使用
	1.1shell简介
		*既可以用shell执行命令、调用linux工具，还可以用作一种编程语言。
		*运行终端时即进入shell，本质为命令行解释器（为C语言所编写）
	1.2shell的使用
		$命令 选项 参数
		#命令 选项 参数
		（$表示普通用户权限，#表示根用户权限）
		（选项包括一个或者多个字母，前面带有减号用以区分选项和参数）
	1.3通配符
		具有特殊含义&功能的字符
		“*”――任意长度的字串，例如“L*”匹配以L开头的任意字串。（但是无法代替./）
		"?"代表任何单个字符
		“[]”指定了模式串匹配的字符范围，例如f[a-d]与f[abcd]作用相同
		"-"仅在方括号内有效，“*”“？”仅在方括号外有效
		*？[]对于shell来说意义特殊，因此文件名中不应该出现这些字符，尤其是目录名
	1.4引号
		1.4.1单引号
			由单引号引起来的字符都作为普通字符出现，包括特殊字符
		1.4.2双引号
			与单引号类似，但不如单引号严格。在双引号中的$\`不会被忽略
		1.4.3反引号
			位于键盘左上角（`），被shell解释为命令行
			执行时，shell首先执行该命令行，并以它的标准输出结果取代整个反引号部分
	1.5注释符
		以字符#开头的正文行表示注释行
	1.6linux常用命令
		1.6.1与目录相关的命令
			pwd：显示当前目录的绝对路径
			cd[目录路径名]：切换到指定目录
			mkdir[目录路径名]：创建一个新的子目录
			rmdir[-p]：删除空目录，若子目录删除后，当前目录p也成为空目录则一起删除
		1.6.2与文件相关的命令
			ls[选项][文件|目录]：显示指定目录中的文件和子目录信息
				↑主要选项：-l，查看当前目录下文件或子目录的详细信息
			cat[选项]文件列表：显示文本文件的内容
				↑主要选项：-n，在每一行前显示行号
			more filename：分屏显示文本文件filename的内容
			cp[选项]源文件 目标文件：将一个文件复制到另一个文件，或将数个文件复制到另一个文件
				↑主要选项：-r，若源文件下含有目录名，该目录下的文件也依序复制到目的地
			mv[选项]源文件 目标文件：将一个文件移至另一个文件，或数个文件移至另一目录
				↑主要选项：-i，若目的地有同名文件，询问是否覆盖
			rm[选项][文件|目录]：删除文件及目录
				↑主要选项：-i，删除前逐一询问；-r，将目录及以下文件也逐一删除；-f，即使属性为只读也直接删除，无需确认
			chmod[选项][文件|目录]：改变文件权限属性
			tar[选项][tar的文件名][文件列表]:压缩、解压缩tar格式的压缩包，制作备份、恢复备份文件
				↑主要选项：-c，建立一个新的tar文件；-v，显示运行过程信息；-z，使用gzip；-t，查看压缩文件内容；-f，文件名称；-x，解压缩tar文件；-M，制作备份档案
			获得帮助：man xx：显示指定功能的帮助信息
				  xx --help：显示指定命令的帮助信息（后缀|more：分页显示）
		1.6.3与网络服务相关的命令
			ping 网络主机地址：查看本机到网络上某一主机能否通信
			ifconfig 网卡名称：配置网卡信息，如IP地址、子网掩码和默认网关
			netstat[参数列表]：显示本机网络状态
				↑常用参数：-a或-all，显示连接中所有套接字Socket
			telnet 网络主机地址：远程登录到网络上的某一服务器主机

二.C语言编程基础
	2.1C语言基本数据类型
		2.1.1整型
			1.整型常量
				十进制整常数（数码0~9，无前缀）
				八进制整常数（以0开头，数码0~7）
				十六进制整常数（以0X开头，数码0~9，A~F/a~f）
			2.整型变量
				基本整型（2字节，-2^15~(2^15-1)）
				无符号基本整型（2字节，0~（2^16-1））
				短整型（2字节，-2^15~(2^15-1)）
				无符号短整型（2字节，0~（2^16-1））
				长整型（4字节，-2^31~(2^31-1)）
				无符号长整型（4字节，0~(2^32-1)）
		2.1.2实型（浮点型）
			1.实型常量
				十进制小数形式（数码0~9，必须有小数点）
				指数形式（十进制数+阶码标志e/E+阶码）
			2.实型变量
				单精度float（4字节，10^-37~10^38）
				双精度double（8字节，10^-307~10^308）
				长双精度long double（16字节，10^-4931~10^4932）
		2.1.3字符型
			ex: a='x';----对应十进制ASC||码是120
			一个字符占一字节
			实际上是在a单元中存放120的二进制代码

		2.1.4转义字符
			'\n'回车换行
			'\t'横向跳到下一制表位置
			'\b'退格
			'\r'回车
			'\f'走纸换页
			'\\'反斜线
			'\''单引号
			'\'''双引号
			'\a'鸣铃
			'\ddd'1~3位八进制数所代表的字符
			'\xhh'1~2位十六进制数所代表的字符
三.make的使用和makefile的编写
	5.1什么是make
		5.1.1make机制概述
			自动化编译，提高软件开发效率，降低了开发复杂度
			运行环境需要一个命令行程序make和一个文本文件makefile
			*make是解释makefile中指令的命令工具
			*makefile是调用系统中的make命令解释当前的makefile
		5.1.2make与makefilel的关系
			make是linux下的二进制程序，执行时自动寻找名为makefile/Makefile的文件进行编译
			格式：makep[options][target]
			*选项内容过多，具体查看书本p145
			all：表示编译所有内容，是执行make时默认的最终目标
			clean：清除所有目标文件
			distclean：清除所有内容
			install：进行安装的内容
	5.2make的书写规则
		*第一条规则中的目标将被确立位最终目标
		makefile包含五方面内容：显示规则、隐式规则、变量定义、文件指示和注释（\\#）
		5.2.1makefile基本语法规则
			targets:prerequisites
			command
			或者
			targets:prerequisites;command
			command
			*targets是目标文件名，多个文件以空格分开，可以使用通配符
			*prerequisites是目标所依赖的文件
			*command是命令行，若其不与target同行，则必须以Tab开头
				若与prerequisites同行，可以以分号作为分隔
			*如果命令太长，可以使用反斜杠\作为换行符
			*make对每一行的字符数量没有限制
		5.2.2在规则中使用通配符
			支持三种通配符“*”“？”“[...]”
			"~"在文件名中也有特殊用途
		5.2.3伪目标
			ex：clean，其并非一个文件而是一个标签，makefile不生成clean文件
				可以清除编译文件的目标，以备完整地重新编译
			*伪目标取名不能与文件名重合
			*可以使用特殊标注指明伪目标
				.PHONY:clean
				clean:...
			*可巧妙用于同时生成若干个可执行文件
		5.2.4多目标
			
		5.2.5自动生成依赖性

	5.3makefile的命令
		*每条命令必须以Tab开始，除非紧跟在依赖规则后面的分号之后

四、进程间通信
	4.1进程间通信简介
		在不同进程间传播或者交换信息
		进程的用户空间是相互独立的，一般无法互相访问，只能利用共享内存区/双方都访问的外设进行信息共享
		

		*linux中的进程通信方法：管道(pipe)、消息队列(message)、信号量(semaphore)、共享内存、套接口(socket)等
		-管道：命名管道、无名管道
		-消息队列、信号量、共享内存->系统IPC
		-管道、消息队列、信号量、共享内存用于本地进程通信
		-套接字用于远程进程通信
	4.2管道
		4.2.1管道的概念
			-比较原始的进程间通信形式、数据以一种数据流方式在进程间流动
			 在系统上相当于一个文件用来缓存要传输的数据
			 在文件系统中并无法看到，只是进程的一种资源
			-在shell中就可以使用管道（|）来连接两个/多个命令
				ex：#kill -l | grep SIGRTMIN
				为半双工管道，kill -l的输出是grep的输入
		4.2.2管道的创建
			linux环境下用pipe函数创建一个匿名管道
				#include <unistd.h>
				int pipe (int fd[2]);
				-fd[2]是一个长度为2的文件描述符数组，当函数成功返回后，自动维护一个从fd[1]到fd[0]的数据通道
				-管道的关闭使用的是基于文件描述符的close函数
			
			*p292程序10.1演示了pipe创建管道&关闭管道的过程
		4.2.3管道的读写
			使用read/write函数对管道进行读写操作（各种回送信号见p292）
			*管道两端功能固定，读出端只能读取数据、写入端只能写入数据
			ex:write(fd[1],"create the pipe successfully!\n",31);
			   read(fd[0],str,sizeof(str));-----char str[256];
			   close(fd[0]);close(fd[1]);
			 *p294程序10.2演示了父进程通过管道向子进程发送消息
			 -相应的，如果将管道应用于兄弟进程，应该先在父进程建立管道、然后调用fork函数创建两个进程、在兄弟进程中维护管道数据方向
			 *p295程序10.3演示兄弟进程

	4.3命名管道FIFO
		4.3.1命名管道的概念
			无名管道只能用于有亲缘关系的进程间通信
			命名管道提供路径名与之关联、以FIFO文件的形式存在于文件系统中
			通过访问路径，即使进程间没有亲缘关系也能使用管道交换数据
			*FIFO严格遵循先进先出、读取从开始处返回数据/写入则添加至末尾

			指令：mkfifo [option] name...
			-选项：-m mode创建FIFO的八进制模式

		4.3.2命名管道的创建
			新创建的FIFO只具有读写权限、隐性的规定不具有执行权限
			*p298程序10.4演示创建一个命名管道
			*p299管道FIFO的打开规则
		4.3.3命名管道的读写
			*p299管道FIFO的读取规则
			*p300管道FIFO的写入规则
			*第六章详细介绍各类函数
			*p300程序10.5/10.6演示使用FIFO进行进程间通信
	4.4消息队列
		4.4.1概念（IPC->进程间通信）
			消息队列/报文队列----随内核持续（定义见p304）
	4.5共享内存
		4.5.1概念
			多个进程把一段内存映射到自己的进程空间
			-所有进程间通信方式中最快的----内核级别
			不足:各进程间需要做好同步，否则造成数据混乱（通过信号量解决同步控制）
			*内核为每隔共享存储段维护一个shmid_ds类型的结构体（定义在<sys/shm.h>）
		4.5.2相关操作
			1.创建一个共享内存区域
				#include <sys/types.h>
				#include <sys/ipc.h>
				#include <sys/shm.h>
				int shmget (key_t key, int size, int flag);
				*shmget函数既可以创建一个新的共享内存，也可以打开一个已存在的共享内存
				*key->要创建/打开的共享内存的键值
				*size->内存区域的大小（只在创建时生效）
				*flag->调用函数的操作类型、设置共享内存的访问权限
				*p314程序10.8创建共享内存
			2.附加
				当进程要使用共好像内存时必须将此内存区域附加到它的地址空间
				#include <sys/types.h>
				#include <sys/ipc.h>
				#incldue <sys/shm.h>
				void *shmat(int shmid,const void *addr,int flag);
				
				*shmid---指定要引入的共享内存
				*addr与flag组合说明要引入的地址值
					addr为0，表明让内核决定第一个可以引入的位置
					addr！=0，flag指定SHM_RND，引入addr所指位置（不推荐）

			3.分离
				进程对共享内存操作完成时，应当调用shmdt函数，让共享内存段脱离进程空间
				#include <sys/types.h>
				#include <sys/ipc.h>
				#include <sys/shm.h>
				int shmdt (void *addr);
				
				*不删除共享内存本身，addr是调用shmat时的返回值

			4.共享内存的控制
				shmctl可以对共享内存段进行多种操作
				#include <sys/types.h>
				#include <sys/ipc.h>
				#include <sys/shm.h>
				int shmctl (int shmid,int cmd,struct shmid_ds *buf);

				*shmid为所要操作的共享内存段的标识符
				*struct shmid_ds型指针参数buf与cmd的值相关
				*cmd指明所要进行的操作（详见p316表10.3）

	4.6信号量
		4.6.1概念
			用于协调各个进程、合理正确地使用公共资源。
			分为单指/多值，前者只能被一个进程获得，后者可以被 若干进程获得


五、网络编程
	5.1网络编程基础知识
		5.1.1计算机网络体系结构
			OSI七层模型-应用层/表示层/会话层/传输层/网络层/数据链路层/物理层
			TCP/IP参考模型-应用层/传输层/网络层/网络接口层
			*各层对应的协议
		5.1.2传输控制协议TCP
			面向连接的运输层协议――全双工/可靠交付
			报文段+序列号
			超时重传
			滑动窗口
			建立连接――三次握手
			关闭连接――三次握手
		5.1.3用户数据报协议UDP
			无连接的运输层协议――不提供可靠交付/不需要建立连接/不发送确认信号/传输快开销少/缺乏拥塞控制
		5.1.4客户机/服务器模式（C/S模式）
			应用程序分为两部分：1.负责启动通信 2.负责进行应答
			*通常在不同的主机上
			*服务器：在网络上提供服务的应用程序/客户机：用户为了得到服务所需要运行的应用程序
	5.2套接口编程基础
		*套接口是操作系统内核中的一个数据结构/网络节点相互通信的门户
		网络编程=套接口编程
		5.2.1什么是套接口（socket）
			*网络进程的ID――IP地址（在网络中确定一台主机）+端口号（一次只能分配给一个进程，唯一确定一个网络进程）
			套接口地址结构――把网络地址/端口号信息放在一个结构体中
			->套接口函数（大部分）需要指向套接口地址结构的指针作为参数
			套接口地址结构都以“sockaddr_”开头，以每个协议族名中的两个字母作为结尾
			*套接口在编程中，所有函数与结构体均是小写，只有常量大写
			三种类型：1.流式套接口（TCP套接口――“SOCK_STREAM”） 
				  2.数据报套接口（UDP套接口――"SOCK_DGRAM"）
				  3.原始套接口（"SOCK_RAW"）	 
		5.2.2端口号概念（Port）
			物理意义：ADSL Modem/集线器/交换机/路由器等连接其他网络设备的接口
			逻辑意义：TCP/IP协议中的端口

			*端口号范围：0~65535(16bit)
				80端口：HTTP协议-网页浏览
				21端口：FTP服务
				...
			端口号类型：1.权威分配――熟知端口号（0~1023）
				    2.一般端口号，随时分配给请求通信的客户进程
		5.2.3套接口数据结构
			套接口数据结构与使用它的网络有关
			*sockaddr_in对应IPv4
			1.通用套接口地址数据结构
				由于历史缘故，bind\connect等系统调用中，特定协议的套接口地址结构指针都要强制转换成通用套接口地址结构指针（实现协议的无关性）
				*定义于<sys/socket.h>  struct sockaddr
			2.IPv4套接口地址数据结构（socketaddr_in）――p339
				*定义于<netinet/in.h>  struct socketaddr_in
				其成员in_addr也是一个结构体
		5.2.4基本函数
			1.字节排序函数
				不同机器可能使用不同的字节顺序（大端模式/小端模式），网际协议必须指定网络字节序（Network Byte Order）
				端口号/IP地址以网络地址存储（大端模式）――――某个系统采用的主机字节序（不确定）
				排序函数――将网络字节序/主机字节序相互对应 p340
				ex: uint32_t htonl(uint32_t hostlong)――将本地计算机的long类型数据转化为网络上的long类型
			2.字节操纵函数
				一起操纵结构体的的某几个字节  p341
				b开头函数由支持套接口函数的系统提供/mem开头函数由ANSIC提供
				ex: void bzero(void *dest, size_t nbytes);
			3.IP地址转换函数 p341
				在网络中IP使用点分十进制/在套接口数据结构中使用32位网络字节序的二进制数值
				必须使用三个函数进行转换：1.int inet_aton(const char *straddr, struct in_addr *addrptr)
							  2.char *inet_ntoa(struct in_addr inaddr)
							  3.in_addr inet_addr(const char *straddr)
			4.IP和域名转换 p342
				在网络上标识一台计算机可以使用IP地址或者域名
				使用函数可以进行二者转换	
	5.3TCP套接口编程
		5.3.1TCP套接口通信工作流程
			1.创建套接口
			2.绑定端口
			3.等待监听函数
			4.接受连接函数
			5.请求连接函数
			6.数据发送函数
			7.数据接收函数
			8.write与read函数
		5.3.2TCP套接口Client/Server程序实例
			
	5.4UDP套接口编程
		5.4.1UDP套接口通信工作流程
		5.4.2UDP套接口Client/Server程序实例
	5.5原始套接口编程
		5.5.1原始套接口的创建
		5.5.2原始套接口程序实例
	5.6本章小结
	实战演练